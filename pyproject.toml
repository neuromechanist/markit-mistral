[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "markit-mistral"
dynamic = ["version"]
description = "PDF and image to markdown converter using Mistral AI OCR"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["markdown", "pdf", "ocr", "mistral", "ai", "converter", "math", "equations"]
authors = [
    { name = "Yahya" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Text Processing :: Markup :: Markdown",
    "Topic :: Scientific/Engineering",
    "Topic :: Multimedia :: Graphics",
]
dependencies = [
    "mistralai>=1.0.0",
    "Pillow>=10.0.0",
    "PyPDF2>=3.0.0",
    "requests>=2.31.0",
    "click>=8.0.0",
    "python-magic>=0.4.27",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.8",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "types-requests>=2.31.0",
    "types-Pillow>=10.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]

[project.urls]
Homepage = "https://github.com/neuromechanist/markit-mistral"
Documentation = "https://github.com/neuromechanist/markit-mistral#readme"
Repository = "https://github.com/neuromechanist/markit-mistral.git"
Issues = "https://github.com/neuromechanist/markit-mistral/issues"

[project.scripts]
markit-mistral = "markit_mistral.__main__:main"

[tool.hatch.version]
path = "src/markit_mistral/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/markit_mistral"]

[tool.ruff]
line-length = 88
target-version = "py310"
extend-exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["markit_mistral"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# Exclude web interface PyScript files from mypy checking
exclude = [
    "src/markit_mistral/web/",
]

[[tool.mypy.overrides]]
module = [
    "mistralai.*",
    "PIL.*",
    "PyPDF2.*",
    "pypdf.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=markit_mistral",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/markit_mistral"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true 